(define (sum term next a b)
        (define (iter a result)
            (if (> a b)
                result
                (iter (next a) (+ result (term a)))))
        (iter a 0))
(define (simpson f a b n)
    (define (yk k)
            (cond ((or (= k 0) (= k n))  (f (+ a (* k h))))
                  ((= (remainder k 2) 0) (* 2 (f (+ a (* k h)))))
                  (else (* 4 (f (+ a (* k h))))) 
            ))
    (define (next k) (+ k 1))
    (define h (/ (- b a) n))
    (define m (/ h 3))
    (* m (sum yk next 0 n)))
(simpson (lambda (x) (* x x x)) 0 1 100)
